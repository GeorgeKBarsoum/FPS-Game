#version 330 core

in vec3 fragColor;

uniform vec3 ambientLight;
out vec3 color;

in vec2 TexCoord;
uniform sampler2D myTextureSampler;


in vec3 vertexPosition_worldspace;
in vec3 normal_worldspace;

uniform vec3 light_position;
uniform vec3 eye_position;

uniform vec2 data;


void main()
{
	vec3 textureColor = texture( myTextureSampler, TexCoord ).rgb;

	vec3 Il = vec3(1,1,1);

	
	vec3 light_vec = normalize(light_position - vertexPosition_worldspace);

	//diffuse Light
	float brightness = dot(light_vec, normal_worldspace);
	vec3 diffuse_light = vec3 (brightness, brightness, brightness);
	diffuse_light = Il*clamp(diffuse_light, 0, 1);


	//specular light
	vec3 reflectedLightVector = reflect(-light_vec,normal_worldspace);
	vec3 eyeDirectionVector = normalize(eye_position - vertexPosition_worldspace);
	float specularity = dot(reflectedLightVector,eyeDirectionVector);
	float specularExponent = data.y;
	specularity = pow(specularity,specularExponent);
	vec3 specularLight = vec3(specularity,specularity,specularity);
	specularLight = Il*clamp(specularLight,0,1);

	float d = abs(distance(vertexPosition_worldspace,light_position));
	float r = data.x;
	float att = 1 - (d/r);
	if ( att < 0)
		att = 0;

	color = ambientLight + (diffuse_light + specularLight)*att;
	color = color*textureColor;

	//color =  (ambientLight + diffuse_light) * textureColor;
	//color =  textureColor * (ambientLight + diffuse_light);
	//color = color +  diffuse_light * textureColor;

}
